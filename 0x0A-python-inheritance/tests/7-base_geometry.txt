The ``7-base_geometry`` module
===========================

Using ``BaseGeometry``
---------------------
This a test file for a class (BaseGeometry) that inherits from list:
  >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

  ===============================================
  >>> bg = BaseGeometry()

  ===============================================
  >>> bg.integer_validator()
  Traceback (most recent call last):
  ...
  TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

  ==============================================
  >>> bg.__class__.area()
  Traceback (most recent call last):
  ...
  TypeError: BaseGeometry.area() missing 1 required positional argument: 'self'

  ==============================================
  >>> bg = BaseGeometry(None)
  Traceback (most recent call last):
  ...
  TypeError: BaseGeometry() takes no arguments

  ==============================================
  >>> bg.integer_validator(None)
  Traceback (most recent call last):
  ...
  TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

  ===============================================
  >>> isinstance(bg, BaseGeometry)
  True

  ===============================================
  >>> issubclass(type(bg), BaseGeometry)
  True
  
  ===============================================
  >>> type(BaseGeometry.__dict__['integer_validator'])
  <class 'function'>

  ===============================================
  >>> bg.integer_validator("my_int", 12)

  ==============================================
  >>> bg.integer_validator("name", None)
  Traceback (most recent call last):
  TypeError: name must be an integer

  ===============================================
  >>> bg.integer_validator("my_neg", -12)
  Traceback (most recent call last):
  ...
  ValueError: my_neg must be greater than 0

  ===============================================
  >>> bg.integer_validator("name", "Bob")
  Traceback (most recent call last):
  ...
  TypeError: name must be an integer

  ===============================================
  >>> bg.integer_validator("my_zero", 0)
  Traceback (most recent call last):
  ...
  ValueError: my_zero must be greater than 0

  ===============================================
  >>> bg.integer_validator("my_zero", 1.2)
  Traceback (most recent call last):
  ...
  TypeError: my_zero must be an integer

  ===============================================
  >>> bg.integer_validator("my_int", "")
  Traceback (most recent call last):
  ...
  TypeError: my_int must be an integer

  ===============================================
  >>> bg.integer_validator("my_zero", -1.2)
  Traceback (most recent call last):
  ...
  TypeError: my_zero must be an integer

  ==============================================
  >>> bg.integer_validator("name", [4, 4])
  Traceback (most recent call last):
  TypeError: name must be an integer

  ==============================================
  >>> bg.integer_validator([0, 0], [0, 0])
  Traceback (most recent call last):
  TypeError: [0, 0] must be an integer

  ==============================================
  >>> bg.area()
  Traceback (most recent call last):
  Exception: area() is not implemented